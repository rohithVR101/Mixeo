/**
 * Shotstack
 * The Shotstack API is a video editing service that allows for the automated creation of videos using JSON. You can configure an edit and POST it to the Shotstack API which will render your video and provide a file location when complete. For more details check https://shotstack.io
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.2.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Poster', 'model/Thumbnail'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./Poster'), require('./Thumbnail'));
  } else {
    // Browser globals (root is window)
    if (!root.ShotstackSdk) {
      root.ShotstackSdk = {};
    }
    root.ShotstackSdk.Output = factory(root.ShotstackSdk.ApiClient, root.ShotstackSdk.Poster, root.ShotstackSdk.Thumbnail);
  }
}(this, function(ApiClient, Poster, Thumbnail) {
  'use strict';



  /**
   * The Output model module.
   * @module model/Output
   * @version v1
   */

  /**
   * Constructs a new <code>Output</code>.
   * The video output format.
   * @alias module:model/Output
   * @class
   * @param format {module:model/Output.FormatEnum} `mp4`, `webm` video or animated `gif`
   * @param resolution {module:model/Output.ResolutionEnum} The output resolution of the video. <ul>   <li>`preview` - 512px x 288px @ 15fps</li>   <li>`mobile` - 640px x 360px @ 25fps</li>   <li>`sd` - 1024px x 576px @ 25fps</li>   <li>`hd` - 1280px x 720px @ 25fps</li>   <li>`1080` - 1920px x 1080px @ 25fps</li> </ul>
   */
  var exports = function(format, resolution) {
    var _this = this;

    _this['format'] = format;
    _this['resolution'] = resolution;
  };

  /**
   * Constructs a <code>Output</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Output} obj Optional instance to populate.
   * @return {module:model/Output} The populated <code>Output</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('format')) {
        obj['format'] = ApiClient.convertToType(data['format'], 'String');
      }
      if (data.hasOwnProperty('resolution')) {
        obj['resolution'] = ApiClient.convertToType(data['resolution'], 'String');
      }
      if (data.hasOwnProperty('aspectRatio')) {
        obj['aspectRatio'] = ApiClient.convertToType(data['aspectRatio'], 'String');
      }
      if (data.hasOwnProperty('scaleTo')) {
        obj['scaleTo'] = ApiClient.convertToType(data['scaleTo'], 'String');
    }
      if (data.hasOwnProperty('poster')) {
        obj['poster'] = Poster.constructFromObject(data['poster']);
      }
      if (data.hasOwnProperty('thumbnail')) {
        obj['thumbnail'] = Thumbnail.constructFromObject(data['thumbnail']);
      }
    }
    return obj;
  }

  /**
   * `mp4`, `webm` video or animated `gif`
   * @member {module:model/Output.FormatEnum} format
   */
  exports.prototype['format'] = undefined;
  /**
   * The output resolution of the video. <ul>   <li>`preview` - 512px x 288px @ 15fps</li>   <li>`mobile` - 640px x 360px @ 25fps</li>   <li>`sd` - 1024px x 576px @ 25fps</li>   <li>`hd` - 1280px x 720px @ 25fps</li>   <li>`1080` - 1920px x 1080px @ 25fps</li> </ul>
   * @member {module:model/Output.ResolutionEnum} resolution
   */
  exports.prototype['resolution'] = undefined;
  /**
   * The aspect ratio (shape) of the video. Useful for social media sites. Options are: <ul>   <li>`16:9` - regular landscape/horizontal aspect ratio (default)</li>   <li>`9:16` - vertical/portrait aspect ratio.</li>   <li>`1:1` - square aspect ratio.</li> </ul>
   * @member {module:model/Output.AspectRatioEnum} aspectRatio
   */
  exports.prototype['aspectRatio'] = undefined;
  /**
   * Override the resolution and scale the video to render at a different size. When using scaleTo the video should be edited at the resolution dimensions, i.e. use font sizes that look best at HD, then use scaleTo to output the video at SD and the text will be scaled to the correct size. This is useful if you want to create multiple video sizes. <ul>   <li>`preview` - 512px x 288px @ 15fps</li>   <li>`mobile` - 640px x 360px @ 25fps</li>   <li>`sd` - 1024px x 576px @25fps</li>   <li>`hd` - 1280px x 720px @25fps</li>   <li>`1080` - 1920px x 1080px @25fps</li> </ul>
   * @member {module:model/Output.ScaleToEnum} scaleTo
   */
  exports.prototype['scaleTo'] = undefined;
  /**
   * @member {module:model/Poster} poster
   */
  exports.prototype['poster'] = undefined;
  /**
   * @member {module:model/Thumbnail} thumbnail
   */
  exports.prototype['thumbnail'] = undefined;


  /**
   * Returns `mp4`, `webm` video or animated `gif`
   * @return {module:model/Output.FormatEnum}
   */
  exports.prototype.getFormat = function() {
    return this['format'];
  }

  /**
   * Sets `mp4`, `webm` video or animated `gif`
   * @param {module:model/Output.FormatEnum} format `mp4`, `webm` video or animated `gif`
   */
  exports.prototype.setFormat = function(format) {
    this['format'] = format;
    return this;
  }


  /**
   * Returns The output resolution of the video. <ul>   <li>`preview` - 512px x 288px @ 15fps</li>   <li>`mobile` - 640px x 360px @ 25fps</li>   <li>`sd` - 1024px x 576px @ 25fps</li>   <li>`hd` - 1280px x 720px @ 25fps</li>   <li>`1080` - 1920px x 1080px @ 25fps</li> </ul>
   * @return {module:model/Output.ResolutionEnum}
   */
  exports.prototype.getResolution = function() {
    return this['resolution'];
  }

  /**
   * Sets The output resolution of the video. <ul>   <li>`preview` - 512px x 288px @ 15fps</li>   <li>`mobile` - 640px x 360px @ 25fps</li>   <li>`sd` - 1024px x 576px @ 25fps</li>   <li>`hd` - 1280px x 720px @ 25fps</li>   <li>`1080` - 1920px x 1080px @ 25fps</li> </ul>
   * @param {module:model/Output.ResolutionEnum} resolution The output resolution of the video. <ul>   <li>`preview` - 512px x 288px @ 15fps</li>   <li>`mobile` - 640px x 360px @ 25fps</li>   <li>`sd` - 1024px x 576px @ 25fps</li>   <li>`hd` - 1280px x 720px @ 25fps</li>   <li>`1080` - 1920px x 1080px @ 25fps</li> </ul>
   */
  exports.prototype.setResolution = function(resolution) {
    this['resolution'] = resolution;
    return this;
  }


  /**
   * Returns The aspect ratio (shape) of the video. Useful for social media sites. Options are: <ul>   <li>`16:9` - regular landscape/horizontal aspect ratio (default)</li>   <li>`9:16` - vertical/portrait aspect ratio.</li>   <li>`1:1` - square aspect ratio.</li> </ul>
   * @return {module:model/Output.AspectRatioEnum}
   */
  exports.prototype.getAspectRatio = function() {
    return this['aspectRatio'];
  }

  /**
   * Sets The aspect ratio (shape) of the video. Useful for social media sites. Options are: <ul>   <li>`16:9` - regular landscape/horizontal aspect ratio (default)</li>   <li>`9:16` - vertical/portrait aspect ratio.</li>   <li>`1:1` - square aspect ratio.</li> </ul>
   * @param {module:model/Output.AspectRatioEnum} aspectRatio The aspect ratio (shape) of the video. Useful for social media sites. Options are: <ul>   <li>`16:9` - regular landscape/horizontal aspect ratio (default)</li>   <li>`9:16` - vertical/portrait aspect ratio.</li>   <li>`1:1` - square aspect ratio.</li> </ul>
   */
  exports.prototype.setAspectRatio = function(aspectRatio) {
    this['aspectRatio'] = aspectRatio;
    return this;
  }


  /**
   * Returns Override the resolution and scale the video to render at a different size. When using scaleTo the video should be edited at the resolution dimensions, i.e. use font sizes that look best at HD, then use scaleTo to output the video at SD and the text will be scaled to the correct size. This is useful if you want to create multiple video sizes. <ul>   <li>`preview` - 512px x 288px @ 15fps</li>   <li>`mobile` - 640px x 360px @ 25fps</li>   <li>`sd` - 1024px x 576px @25fps</li>   <li>`hd` - 1280px x 720px @25fps</li>   <li>`1080` - 1920px x 1080px @25fps</li> </ul>
   * @return {module:model/Output.ScaleToEnum}
   */
  exports.prototype.getScaleTo = function() {
    return this['scaleTo'];
  }

  /**
   * Sets Override the resolution and scale the video to render at a different size. When using scaleTo the video should be edited at the resolution dimensions, i.e. use font sizes that look best at HD, then use scaleTo to output the video at SD and the text will be scaled to the correct size. This is useful if you want to create multiple video sizes. <ul>   <li>`preview` - 512px x 288px @ 15fps</li>   <li>`mobile` - 640px x 360px @ 25fps</li>   <li>`sd` - 1024px x 576px @25fps</li>   <li>`hd` - 1280px x 720px @25fps</li>   <li>`1080` - 1920px x 1080px @25fps</li> </ul>
   * @param {module:model/Output.ScaleToEnum} scaleTo Override the resolution and scale the video to render at a different size. When using scaleTo the video should be edited at the resolution dimensions, i.e. use font sizes that look best at HD, then use scaleTo to output the video at SD and the text will be scaled to the correct size. This is useful if you want to create multiple video sizes. <ul>   <li>`preview` - 512px x 288px @ 15fps</li>   <li>`mobile` - 640px x 360px @ 25fps</li>   <li>`sd` - 1024px x 576px @25fps</li>   <li>`hd` - 1280px x 720px @25fps</li>   <li>`1080` - 1920px x 1080px @25fps</li> </ul>
   */
  exports.prototype.setScaleTo = function(scaleTo) {
    this['scaleTo'] = scaleTo;
    return this;
  }


  /**
   * @return {module:model/Poster}
   */
  exports.prototype.getPoster = function() {
    return this['poster'];
  }

  /**
   * @param {module:model/Poster} poster
   */
  exports.prototype.setPoster = function(poster) {
    this['poster'] = poster;
    return this;
  }


  /**
   * @return {module:model/Thumbnail}
   */
  exports.prototype.getThumbnail = function() {
    return this['thumbnail'];
  }

  /**
   * @param {module:model/Thumbnail} thumbnail
   */
  exports.prototype.setThumbnail = function(thumbnail) {
    this['thumbnail'] = thumbnail;
    return this;
  }


  /**
   * Allowed values for the <code>format</code> property.
   * @enum {String}
   * @readonly
   */
  exports.FormatEnum = {
    /**
     * value: "mp4"
     * @const
     */
    "mp4": "mp4",
    /**
     * value: "webm"
     * @const
     */
    "webm": "webm",
    /**
     * value: "gif"
     * @const
     */
    "gif": "gif"  };

  /**
   * Allowed values for the <code>resolution</code> property.
   * @enum {String}
   * @readonly
   */
  exports.ResolutionEnum = {
    /**
     * value: "preview"
     * @const
     */
    "preview": "preview",
    /**
     * value: "mobile"
     * @const
     */
    "mobile": "mobile",
    /**
     * value: "sd"
     * @const
     */
    "sd": "sd",
    /**
     * value: "hd"
     * @const
     */
    "hd": "hd",
    /**
     * value: "1080"
     * @const
     */
    "1080": "1080"  };

  /**
   * Allowed values for the <code>aspectRatio</code> property.
   * @enum {String}
   * @readonly
   */
  exports.AspectRatioEnum = {
    /**
     * value: "16:9"
     * @const
     */
    "16:9": "16:9",
    /**
     * value: "9:16"
     * @const
     */
    "9:16": "9:16",
    /**
     * value: "1:1"
     * @const
     */
    "1:1": "1:1"  };

  /**
   * Allowed values for the <code>scaleTo</code> property.
   * @enum {String}
   * @readonly
   */
  exports.ScaleToEnum = {
    /**
     * value: "preview"
     * @const
     */
    "preview": "preview",
    /**
     * value: "mobile"
     * @const
     */
    "mobile": "mobile",
    /**
     * value: "sd"
     * @const
     */
    "sd": "sd",
    /**
     * value: "hd"
     * @const
     */
    "hd": "hd",
    /**
     * value: "1080"
     * @const
     */
    "1080": "1080"  };


  return exports;
}));


