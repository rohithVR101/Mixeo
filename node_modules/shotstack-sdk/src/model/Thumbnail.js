/**
 * Shotstack
 * The Shotstack API is a video editing service that allows for the automated creation of videos using JSON. You can configure an edit and POST it to the Shotstack API which will render your video and provide a file location when complete. For more details check https://shotstack.io
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.2.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.ShotstackSdk) {
      root.ShotstackSdk = {};
    }
    root.ShotstackSdk.Thumbnail = factory(root.ShotstackSdk.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';



  /**
   * The Thumbnail model module.
   * @module model/Thumbnail
   * @version v1
   */

  /**
   * Constructs a new <code>Thumbnail</code>.
   * Generate a thumbnail image for the video at a specific point from the timeline.
   * @alias module:model/Thumbnail
   * @class
   * @param capture {Number} The point on the timeline in seconds to capture a single frame to use as the thumbnail image.
   * @param scale {Number} Scale the thumbnail size to a fraction of the viewport size - i.e. setting the scale to 0.5 will scale  the thumbnail to half the size of the viewport.
   */
  var exports = function(capture, scale) {
    var _this = this;

    _this['capture'] = capture;
    _this['scale'] = scale;
  };

  /**
   * Constructs a <code>Thumbnail</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Thumbnail} obj Optional instance to populate.
   * @return {module:model/Thumbnail} The populated <code>Thumbnail</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('capture')) {
        obj['capture'] = ApiClient.convertToType(data['capture'], 'Number');
      }
      if (data.hasOwnProperty('scale')) {
        obj['scale'] = ApiClient.convertToType(data['scale'], 'Number');
      }
    }
    return obj;
  }

  /**
   * The point on the timeline in seconds to capture a single frame to use as the thumbnail image.
   * @member {Number} capture
   */
  exports.prototype['capture'] = undefined;
  /**
   * Scale the thumbnail size to a fraction of the viewport size - i.e. setting the scale to 0.5 will scale  the thumbnail to half the size of the viewport.
   * @member {Number} scale
   */
  exports.prototype['scale'] = undefined;


  /**
   * Returns The point on the timeline in seconds to capture a single frame to use as the thumbnail image.
   * @return {Number}
   */
  exports.prototype.getCapture = function() {
    return this['capture'];
  }

  /**
   * Sets The point on the timeline in seconds to capture a single frame to use as the thumbnail image.
   * @param {Number} capture The point on the timeline in seconds to capture a single frame to use as the thumbnail image.
   */
  exports.prototype.setCapture = function(capture) {
    this['capture'] = capture;
    return this;
  }


  /**
   * Returns Scale the thumbnail size to a fraction of the viewport size - i.e. setting the scale to 0.5 will scale  the thumbnail to half the size of the viewport.
   * @return {Number}
   */
  exports.prototype.getScale = function() {
    return this['scale'];
  }

  /**
   * Sets Scale the thumbnail size to a fraction of the viewport size - i.e. setting the scale to 0.5 will scale  the thumbnail to half the size of the viewport.
   * @param {Number} scale Scale the thumbnail size to a fraction of the viewport size - i.e. setting the scale to 0.5 will scale  the thumbnail to half the size of the viewport.
   */
  exports.prototype.setScale = function(scale) {
    this['scale'] = scale;
    return this;
  }



  return exports;
}));


